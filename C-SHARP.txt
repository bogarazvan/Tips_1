
//If no access modifier is specified for a class or a structure,
//it is considered Public (public).

//If no access modifier is specified for a function 
//it is considered private

//public private protected internal /protected internal


//array 
 
int[] myInts = { 5, 10, 15 };
       
		Int32[][] myInt = new Int32[2][];//jagged array
            myInt[0] = new Int32[3];
			//sau
			myInt[0] = new int[3]{1,2,3};
            myInt[1] = new Int32[2];
			
        double[,] myDoubles = new double[2, 2];
        string[] myStrings = new string[3];
		
        myInt[0][0] = 1;
        myInt[0][1] = 2;
        myInt[0][2] = 3;

		myInt[1][0] = 4;
		myInt[1][1] = 5;
		
		
		myDoubles[0, 0] = 3.147;
        myDoubles[0, 1] = 7.157;
        myDoubles[1, 1] = 2.117;
        myDoubles[1, 0] = 56.00138917;
		
		myStrings[0] = "Joe";
        myStrings[1] = "Matt";
        myStrings[2] = "Robert";
//----

//Parse metoda statica(de aia din Int32) str in nr daca nu poate da eroare
 x = Int32.Parse(xStr);
 tbNumeCopiat.Text =x.ToString();//nu accepta numa text

//case
case "Q":
case "q":

//params
	void viewAddresses(params  string[] names) 
	
//convert to 
	int red=Convert.ToInt32(args[0]);
	y.ToString();
	
//ref => reference
	public void Demo2(int p1, ref int p2)
	Demo2(x,ref y);//apel
	
//out => output
	void Word(out String xx){}
	Word(out numeVariabila);
	
//internal assembly only
	internal
	
//acces la static var doar prin clasa nu prin obiect

//background
	this.BackColor = System.Drawing.Color.Red;
	
//form
	Form.Show();//This method causes an instance of a form class to load into memory,
			 //	display on the screen, and receive the focus of the application
			 //daca e gata incarcat si form nu e visible atunci pune Visible pe true
	
	Form.ShowDialog(); // face tot ce face Form.Show da formu apare in fata si tre sa scapi
					  //de el prima data in aplicatia ta
	
	myForm.Activate();//i da focus la form
	myForm.Deactivate();//ia focus
	
	myForm.Hide();//Visible e false
	

	myForm.Close();//elibereaza memoria	
	//Load event is fired when the form is first called just once during lifetime 
	
	Closing event//inainte de a se inchide dupa ce da click pe exit sau mai stiu eu ce close
	//se verifica de ex o validare si apoi se decide daca se inchide sau nu
	//poate face Cancel property true
	e.Cancel=true;
	
	MessageBox.Show(String.Format("{0}\t{1:C}\t\t{2:C} ", year, a, interest));
	// String.Format does the same kind of formatting as WriteLine, but
	//the result is returned as a string
	
	//Tool tip pt orice
	ToolTip forButton = new ToolTip();
	forButton.SetToolTip(button2,"Clik this to exit !");
	
	errorProvider1.SetError(textBox1, "buya");
	errorProvider1.Clear();
	
	//Dinamic control creation
	Label l1 = new Label();
	l1.Text = "Buya";
	l1.name="l1";//nu stii ce nume pune
	l1.Location=new Point(100,100);
	this.Controls.Add(l1);
	
	//Remove dinamic
	String name = "l1";
    foreach(Control control in this.Controls)
	{
		if (control.Name == name)
        {
			this.Controls.Remove(control);
		}
		
    }
     
// This example assumes the existence of a control called
// myTabControl
Button aButton = new Button();
// This line adds a new button to the tab page located at index 1 
// of the TabPages collection in the TabControl
myTabControl.TabPages[1].Controls.Add(aButton);	 
       
	
	//la menu & pt shortcut
	E&xit
	
	//Context
	ContextMenu e component il asociezi cu un control
	
	//toolStripMenuItem
	toolStripMenuItem.Enabled=false; //dezactiveaza opt din meniu
	
	//password
	PasswordChar
	
	//la KeyEvents de la key up etc.
	e.KeyCode.ToString();//zice tasta pe care ai apasat 
	
	//char
	Char.IsDigit

	Char.IsLetter
	
	Char.IsLetterOrDigit

	Char.IsPunctuation

	Char.IsLower

	Char.IsUpper
	
	if (Char.IsDigit(e.KeyDate.ToString()) == true)
	
	//Enabled activeaza sau dezactiveaza controlu
	tbNumeCopiat.Enabled = false;
	
	//CanFocus iti zice daca poate focusa nu poti modifica
	label1.CanFocus
	
	Event validating cand vrei sa iesi valideaza si poti
	zice e.Cancel = true; daca nu respecta si nu mai pleaca de acolo
	
	CausesValidation = false ;//nu mai ... validation
	
	//Ex foreach
	foreach (System.Windows.Forms.Control aControl in this.Controls)
            {
                if (aControl is System.Windows.Forms.TextBox)
                {
                    if(aControl.Text == "")
                    {
                        aControl.BackColor = Color.Red;
                    }

                }
            }
	//Sau daca ai nemespace 

	foreach (Control aControl in this.Controls)
            {
                if (aControl is TextBox)
                {
                    if(aControl.Text == "")
                    {
                        aControl.BackColor = Color.Red;
                    }

                }
            }	
	//Daca KeyPreview property of the form is set to true shi Formu are KeyPress handler
	//si ai un control care are si el KeyPress handler	atunci Formu cu KeyPreview 
	//executa prima data handleru lui si apoi se executa handleru de la control
	
	//Exemplu
	
	private void Form1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
	{
	// This(The Form1) handles the event and prevents it from being passed to 
	// the control's KeyPress event handler   
	e.Handled = true;
	}

	//ErrorProvider mai bine din tollbox decat cu new
	private void button3_Click(object sender, EventArgs e)
        {
            if (textBox2.Text == "")
            {
                myErrorProvider.SetError(textBox2, "Can't be empty");
            }
            else
            {
                myErrorProvider.SetError(textBox2, "");
            }
        }
		
	//The TextBox control contains several properties that 
	//restrict the values users can enter. 
	
	MaxLength	

	PasswordChar

	ReadOnly

	MultiLine
	
	//Explicit Cast
	anInteger = (int)aLong;
	
	//Totul deriva din object 
	
	//enum
	public enum DaysOfWeek
	{
	Monday = 1,
	Tuesday = 2,
	Wednesday = 3,
	Thursday = 4,
	Friday = 5,
	Saturday = 6,
	Sunday = 7
	}
	
	DaysOfWeek.Monday !! ((int)DaysOfWeek.Monday).ToString();
	
	//Colections exista si alte tipuri de colectii cu coada(Queue),stiva(Stack),SortedList
	System.Collections.ArrayList myList = new System.Collections.ArrayList();
            String x1 = "Buya";
            String x2 = "Leya";
            String x3 = "Nakos";
            int x4 = 10;

            myList.Add(x1);
            myList.Add(x2);
            myList.Add(x3);
            myList.Add(x4);
            
            richTextBox1.Text += myList[3].ToString();
            richTextBox1.Text += myList[2].ToString();
            myList.RemoveAt(2);
            myList.Remove(x3);
            myList.Count;
            
            richTextBox1.Text = myList[4].ToString();
			//Get type typeof()
			//La foreach nu poti modifica valoarea doar iterezi prin
			//Daca vrei sa modifici folosesti for			
			foreach (Object x in myList)
				if (x.GetType() == typeof(String))
			
			for (int i = 0; i < myList.Capacity; i++)
            {
                richTextBox1.Text += myList[i]+"\t";
            }
	
	
	//
	
//alias
	using myAlias = MyNameSpaceTwo.Widget;

	MyNameSpaceTwo.Widget anotherWidget = new MyNameSpaceTwo.Widget() ;
	myAlias anotherWidget = new myAlias() ;
	
//For parameters of reference types, 
//the behavior is the same whether passed by value or by reference. 	
	
	
	
//vezi cum poti aduce referinta la un nou form sau cum poti adauga alt form si asa mai departe
Application.Run(new myForm());//din main
	
//obiect din sender
        private void Form1_MouseClick(object sender, MouseEventArgs e)
        {
            Form1 x;
            x = (Form1)sender;
            x.BackColor = System.Drawing.Color.LightYellow;
        }	
		
//String.Insert()
            String x = "x";
            x = x.Insert(1, "zzzz");
            textBox1.Text = x;		
			
//ArrayList | dinamic array | colections
			String s1 = "s1" ;
            String s2 = "s2" ;
            String s3 = "s3" ;

            ArrayList ar1 = new ArrayList();

            ar1.Add(s1);
            ar1.Add(s2);
            ar1.Add(s3);

            ar1.Remove(s1);
            for (int i = 0; i < ar1.Count;i++ )
                richTextBox1.Text += (String)ar1[i]+"\n";			
				
//ArrayList obiecte diferite
foreach (object o in myList)
{
   if (o.GetType() == typeof(string))
   {
      MessageBox.Show(o.ToString());
   }
}

//cu for
int[] myArray = new int[] {1,2,3,4,5};
for (int x = 0; x <= myArray.GetUpperBound(0); x++)
{
   myArray[x] ++;
   MessageBox.Show(myArray[x].ToString());
}

//properties
private [readonly] int mLength;// daca e readonly nu are set 
//daca e w-only nu are get da nu exista cuv writeonly 
public int Length
{
   get
   {
      // Returns the value stored in the local variable
      return mLength;
   }
   set
   {
      // Validates that the value does not exceed the maximum value
      // of 32
      if (value > 32)
		{
			MessageBox.Show(value.ToString() +" is too large a value for this property!");
			mLength="";
		}
      else
         mLength = value;
   }
}
Length=100;
Console.WriteLine("{0}",object.Length);

//Indexer
// Creates an array to store the values exposed by the indexer
private int[] IntArray;
// The index variable in brackets is used to retrieve the correct item
public int this[int index]
{
   get
   {
      return IntArray[index];
   }
   set
   {
      IntArray[index] = value;   
   }
}
//ex
class SampleCollection<T>
{
    // Declare an array to store the data elements.
    private T[] arr = new T[100];

    // Define the indexer, which will allow client code
    // to use [] notation on the class instance itself.
    // (See line 2 of code in Main below.)        
    public T this[int i]
    {
        get
        {
            // This indexer is very simple, and just returns or sets
            // the corresponding element from the internal array.
            return arr[i];
        }
        set
        {
            arr[i] = value;
        }
    }
}

// This class shows how client code uses the indexer.
class Program
{
    static void Main(string[] args)
    {
        // Declare an instance of the SampleCollection type.
        SampleCollection<string> stringCollection = new SampleCollection<string>();

        // Use [] notation on the type.
        stringCollection[0] = "Hello, World";
        System.Console.WriteLine(stringCollection[0]);
    }
}

//work around pt colectii(returnez obj convertit) poate folosesc la fel si un indexer
private System.Collections.ArrayList mWidgets = new System.Collections.ArrayList();
public Widget GetWidget(int I)
{
   return (Widget)mWidgets[I];
}
public void SetWidget(int I, Widget Wid)
{
   mWidgets[I] = Wid;
}

//delegate trimite o referinta catre entry pointul unei metode
public delegate int myDelegate(double D);//declaratie

public int ReturnInt(double D)// This method is the target for the delegate
{
   // Method implementation omitted
}
// This line creates an instance of the myDelegate delegate that 
// specifies ReturnInt 
public void amethod()
{
    myDelegate aDelegate = new myDelegate(ReturnInt);
}

//In Visual C#, if you create a delegate to an instance method, 
//you must also initialize the delegate within a method. 
//Delegates to static methods can be initialized outside a method.

//folosire delegate ca si orice fc
aDelegate(12345);

//overload operator tre sa fie public static
        public static HoursWorked operator + (HoursWorked w1 , HoursWorked w2)
        {
            HoursWorked total = new HoursWorked();
            total.regular += w1.regular  + w2.regular;
            total.overtime += w1.overtime + w2.overtime;
            return total;
        }
		
//implementarea unei interfete 
//nu trebe cast special la obiect pt a folosi interfata
public interface IDrivable
{
   void GoForward(int Speed);
}
public class Truck : IDrivable
{
   public void GoForward(int Speed)
   {
      // Implementation omitted
   }
}

//acum trebuie cast explicit la intefata 
//daca vrei s-o folosesti nu mai merge din clasa direct
public class Truck : IDrivable
{
   void IDrivable.GoForward(int Speed)
   {
      // Implementation omitted
   }
}

	car c1 = new car();//obiect
	IDrivable vehicle;//interfata
	vehicle = (IDrivable)c1;//(intefata+obiect)
	vehicle.go_forward(50);		
		
		
//inheritance mostenire cu interfata interface
public class FourWheelDrivePickupTruck : PickupTruck, IFourWheelDrive
{
   // Additional implementation omitted
}

//non mostenibila
public sealed class AClass{}

//Only base class methods and properties can be overridden. 
//Member variables and events cannot be overridden.

//ca sa poata fi override tre sa fie virtual
public virtual void OverrideMe()
{
   // Implementation omitted
}

// This example assumes the existence of a GoForward method in the
// base class override
public class SportsCar : Car
{
   public override void GoForward(int Speed)
   {  
      // implementation omitted
   }
}

//method shadowing hide
// This is the base class
public class MyBaseClass
{
   public string MyMethod(int I)
   {
      // Implementation omitted
   }
}
// This class inherits the base class
public class MyInheritedClass : MyBaseClass
{
   // This function shadows the MyMethod method defined in the base 
   // class. Note that this member has the same signature but a 
   // different access level, and now returns a different type of 
   // value.
   internal new int MyMethod(int I)
   {
      // Implementation omitted
   }
}

//mostenire shadow folosesti si cu shadow si fara 
// This example uses the MyBaseClass and MyInheritedClass classes
// defined in the previous code example.
MyInheritedClass X = new MyInheritedClass();
MyBaseClass Y;
// X and Y now refer to the same object, but the variables have 
// different types.
Y = X;
// Because the variable X is of the MyInheritedClass type, the new
// member will be called by this line.
X.MyMethod(42);
// However, because the variable Y is of the MyBaseClass type, the 
// original implementation of the member will be called by this line.
Y.MyMethod(42);
/*
As this example demonstrates, the type of the variable determines whether a 
shadowed (hidden) member or the original member is called. Thus, you can change 
the implementation of a member without destroying the ability of a class 
to behave polymorphically.

If a class with a shadowed or hidden member is inherited, the shadowed or hidden 
member is not inherited, and the new class will expose the base member.

*/

//base pt o metoda din clasa de baza
// This example demonstrates calling the base class implementation of 
// MyMethod from within an override of that method
public override string MyMethod(int I)
{
   base.MyMethod(I);
   // Additional implementation omitted
}

//abstarct class+methods properties
public abstract class Car
{
   public abstract void GoForward(int I);
   public abstract int CheckSpeed();
   public abstract string Color
   {
      get;
      set;
   }
}

// Syntax errors errors represent code that cannot be understood by the compiler 
// run-time are errors that occur when an attempt is made to perform an operation 
//that is impossible to carry out.
-----------------
// logical are errors that result when code compiles and executes correctly, 
//but returns an unexpected result

//Ado .NET
 DataSet, which stores data on the local machine
 Data Provider, a set of components that mediates interaction between the program and the database
		
//ex

            SqlConnection conn = new SqlConnection("Data Source=RAZVAN-PC\\SQLEXPRESS;Initial Catalog=my_db;Integrated Security=True");
            SqlDataReader rdr = null;
try
{
            conn.Open();

            SqlCommand cmd = new SqlCommand("SELECT * FROM Clients",conn);

            rdr = cmd.ExecuteReader();//readeru returneaza Object tre cast daca vrei sa le folosesti
            while (rdr.Read())
            {
                Console.WriteLine("{0} {1} {2}",rdr[0],rdr[1],rdr[2]);
                Console.ReadKey();
            }
}
finally
{
// Close the connection
	if (conn != null)
	{
		conn.Close();
	}
//Close reader
	if (rdr != null)
	{
		rdr.Close();
	}
         
}
//data grid
			


//try catch finally
try{}
catch (System.Exception e){}
finally{}
		

//lessons
c# Station	
lectia 5
chestia cu params args;
Stowin
lesson 2 form events

detalii control colection
CloneMenu nu este





