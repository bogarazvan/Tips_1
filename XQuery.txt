http://localhost:8080/exist/rest/db/Book/bookStore1.xml
for $book in (collection('Book')//book/title , collection('Components')//book/title)//daca pui var in collection tre return
doc("/db/Book/bookStore1.xml")


//exist pt serialize
declare namespace exist = "http://exist.sourceforge.net/NS/exist"; 
declare namespace request="http://exist-db.org/xquery/request";
declare namespace xmldb="http://exist-db.org/xquery/xmldb";
declare namespace math = "http://exist-db.org/xquery/math";
 

//trans html
declare option exist:serialize "method=html media-type=text/html indent=yes";
declare option exist:serialize "method=xhtml media-type=application/xhtml+xml indent=yes";//creca e pt xhtml
declare option exist:serialize "method=xhtml media-type=text/html indent=yes omit-xml-declaration=yes";
declare option exist:serialize "method=xhtml media-type=text/xml indent=yes omit-xml-declaration=no";



//modules
import module namespace util="http://exist-db.org/xquery/util";//util:random

util:document-name(/Order)//daca e numa un nod
file:directory-list($directory as xs:string, $pattern as xs:string)
util:eval(string sau variabila ce are stringu)

//uri propriu scriptutlui
let $get-uri := request:get-uri()
let $get-url := request:get-url()
let $exist-home := system:get-exist-home()//locatia eXist

position()
data()
1. General comparisons: =, !=, <, <=, >, >=

2. Value comparisons:   eq, ne, lt, le, gt, ge

div , mod

     ? matches zero or one items
     * matches zero or more items
     + matches one or more items
//login
session:set-current-user($user, $pass) 

let $x := (1 to 5)
return <test>{$x}</test>

for $x in doc("books.xml")/bookstore/book
where $x/price>30
order by $x/title
return $x/title

for $x at $i in /bookstore/book/title

<ul>
{
for $x in doc("books.xml")/bookstore/book
order by $x/title
return <li>{data($x/title)}. Category: {data($x/@category)}</li>//category tre sa fie data() altfel nu apare rezultat
}
</ul>

//double for
for $x in (1 to 5)
for $y in (1 to 5)
return $x*$y
sau 

for $x in (1 to 5),$y in (1 to 5)
return $x*$y

//let cu tip
let $a:=xs:boolean("true")

//function
declare function local:minPrice($p as xs:decimal?,$d as xs:decimal?)
AS xs:decimal?
{
let $disc := ($p * $d) div 100
return ($p - $disc)
}

Below is an example of how to call the function above:

<minPrice>{local:minPrice($book/price,$book/discount)}</minPrice>

//function simpla add
xquery version "1.0";

declare function local:add($a as xs:integer, $b as xs:integer) as xs:integer 
{
 xs:integer($a+$b)
};
document {
<result>{
local:add(5,2)
}
</result>
}

//return if
for $x in doc("books.xml")/bookstore/book
return if ($x/@category="CHILDREN")
then <child>{data($x/title)}</child>
else <adult>{data($x/title)}</adult>

//ex xs:decimal
for $book in /bookstore/book
let $title:=$book/title/text()
let $price:=$book/price/text()
where xs:decimal($price) > 30
order by xs:decimal($price)
return
<book>
 <title>{$title}</title>
 <price>{$price}</price>
</book>

//sequence count double return
let $seq:=('a','b','c',10,20)
let $count:=count($seq)

return
<results>
{
for $item in $seq
return
  <item>{$item}</item>
}
</results>

//xml sequence
let $sequence := ('apple', <banana/>, <fruit type="carrot"/>, <animal type='dog'/>, <vehicle>car</vehicle>)

let $items := 
<items>
  <banana/> <fruit type="carrot"/> <animal type='dog'/> <vehicle>car</vehicle>
</items>

//xml sequence
let $items:=
<items>
 <item>Banana</item>
 <item>Orange</item>
 <item>Apple</item>
 <item>Windows</item>
</items>

return
<result>
{
for $item in $items/item
return 
if(data($item)='Banana')
then <item>{$item/text()}</item>
else <garbage>{$item/text()}</garbage>

}
</result>

//min max avg la sequences

//suma tuturor price
let $x:=/bookstore/book/price/text() sau xs:decimal(price)
return
sum($x)

//cautare search
for $x in /bookstore/book/title
where starts-with($x,'H') sau contains()
return
$x/ancestor::book

//descending
for $x in /mondial/country
where contains($x/name,'R') 
order by xs:integer($x/population) descending //sau order by $x//city[@is_country_cap='yes'] numa cu // merge
return 
<result>
<country>{ $x/name/text() }</country>
<capital>{ $x//city[@is_country_cap='yes']/name/text() }</capital>
<population>{$x/population/text()}</population>
</result>

//returneaza in x books ordonate dupa price 
//extrag 3 de acolo
let $x:=
(
for $b in /bookstore/book 
order by $b/xs:float(price) 
return $b
)

return $x[position()=(1 to 3)]

si merg prin sequence

for $it in $x
where $it/title='Harry Potter'
return $it

//i-mi zice cine o facut cartea , daca m_id de la carte = id de la manufacturer
for $x in //manufacturer
where contains( //book[5]/data(@m_id) , $x/@id )
return $x

//distinct values
let $s:=( for $x in /bookstore/book return <m_id>{ $x/data(@m_id) }</m_id>)//foarte bine stochezi XML elements si le parcurgi usor
for $x in distinct-values($s) 
return <m_id>{$x}</m_id>

// distinct values returnez o sg carte care are titlu din d

for $d in distinct-values(/bookstore/book/title)
return /bookstore/book[title=$d][1]

//subsequence
let $s:=( for $x in /bookstore/book return <m_id>{ $x/data(@m_id) }</m_id>)
return subsequence($s,3,5)

    * for $i as xs:integer in 1 to 5 return $i*2
    * for $b as element(book) in /bookstore/book return $b
    * let $a as element(actor)* := //actor return string($a)//tre steluta
	
//send param to xq
xquery version "1.0";
declare namespace request="http://exist-db.org/xquery/request";
declare namespace xs="http://www.w3.org/2001/XMLSchema";

let $param1:= request:get-parameter("param1","aaaa")
let $param2:= request:get-parameter("param2","bbbb")

return
<results>
   <message>Got param1: {$param1} and param2: {$param2}</message>
</results>

//insert-before
let $s:=("a","b","c","d","e","f")
let $s:=(insert-before($s ,5, "XXX"))
return $s

//index-of
let $s:=("a","b","c","d","e","f")
let $s:=(insert-before($s ,index-of($s,"f"), "XXX"))
return $s

//remove
let $s:=("a","b","c","d","e","f")
let $s:=(remove($s ,index-of($s,"f") ))
return $s

//replace
let $a:='buya'
return replace($a,"y", "xxxxx")

fn:tokenize($input, $regex, $flags) returns an array of strings that consists
of all the substrings in the input string between all the matches of the pattern. 
The array will not contain the matches themselves.

//castable as
let $myint := if ($myint castable as  xs:integer)
              then xs:integer($myint)
              else 0

//returneaza toti parametrii
http://en.wikibooks.org/wiki/XQuery/Getting_URL_Parameters
let $parameters :=  request:get-parameter-names()
for $parameter in $parameters


//string-join uneste 
let $b:=/bookstore/book/title
let $a:= string-join($b,' , ')
return $a
	
//position
let $a:=/bookstore/book[position()=(1 to 3)]	

//update replace face replace pe fisieru xml din bd
for $t in collection("Book")/bookstore/book/title
return 
(
if($t="Everyday Italianos")
then
(update replace $t with <title>Everyday Italian</title>)
else($t)
)

//update insert expr ( into | following | preceding )
for $b in /bookstore/book[1]
return
update insert <title lang="en">Everyday Italian</title> preceding $b/author 

//update delete
for $b in /bookstore/book[1]
return
update delete $b/title[1]//sterge numa un titlu
	
//exists daca e returneaza true
exists( /bookstore/book[contains(title,$w)]/title ) 

//module
import module namespace status="http://exist-db.org/xquery/admin-interface/status"
at "xmldb:exist:///db/modules/test.xqm";

//max min la fel
max((1,2,3))

//util:eval()
declare namespace util="http://exist-db.org/xquery/util";

let $x:= concat("1","+","2")
let $x1:=util:eval($x)
return $x1


//exista try catch ?
//mai multe despre session si logare in general



